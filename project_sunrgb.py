# -*- coding: utf-8 -*-
"""Project_SUNRGB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10sTrNW8lcR9XVfn1snQVxDfplCafFPCC

# CNN

## Connect with Github
"""

!git clone https://github.com/LucaZRY/Machine_learning_Project.git

"""## Matlab data"""

from scipy.io import loadmat

# loading .mat
file_path = '"D:\RPI zhour4\MANE\MANE 4962\Machine_learning_Project\DATA\SUNRGBDMeta3DBB_v2.mat"'
data = loadmat(file_path)

# 打印文件中的变量名称
print(data.keys())

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Initalize ImageDataGenerator
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

# Dataset
train_dir = 'path/to/combined_dataset/train'
validation_dir = 'path/to/combined_dataset/validation'

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),  # 调整图像大小
    batch_size=32,
    class_mode='binary'  # 或 'categorical'，取决于问题类型
)

validation_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(
    validation_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# CNN
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(1, activation='sigmoid')  # 调整为所需的输出层
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(
    train_generator,
    steps_per_epoch=100,  # 可能需要根据数据集大小调整
    epochs=10,
    validation_data=validation_generator,
    validation_steps=50  # 可能需要根据数据集大小调整
)